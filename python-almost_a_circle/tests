#!/usr/bin/python3
import unittest, os, json, sys
from models.rectangle import Rectangle, Base
from io import StringIO
from unittest.mock import patch
import io

"""
This module contains all the test cases for the rectangle module
"""

class test_rectangle(unittest.TestCase):
    """
    This class contains all the test cases for the rectangle module
    """
    def setUp(self):
        """
        initializes the values for the test cases
        """
        self.r1 = Rectangle(10, 2)
    
    def delete(self):
        """
        deletes the object after the test cases
        """
        del self.r1
    
    def test_inheritance(self):
        """
        tests if the rectangle class inherits from the base class
        """
        self.assertIsInstance(self.r1, Base)
    
    def test_width(self):
        """
        tests if the width is set properly
        """
        self.assertEqual(self.r1.width, 10)
    
    def test_height(self):
        """
        tests if the height is set properly
        """
        self.assertEqual(self.r1.height, 2)

    def test_x(self):
        """
        tests if the x is set properly
        """
        sefl.r.x = 1
        self.assertEqual(self.r1.x, 1)
        self.assertEqual(self.r1.y, 0)

    def test_y(self):
        """
        tests if the y is set properly
        """
        self.r1.y = 1
        self.assertEqual(self.r1.y, 1)
        self.assertEqual(self.r1.x, 0)
    
    def test_id(self):
        """
        tests if the id is set properly
        """
        rect = Rectangle(10, 2)
        self.assertEqual(rect.id, 1)
    
    def test_width_type(self):
        """
        tests if the width is an integer
        """
        with self.assertRaises(TypeError):
            rect = Rectangle("10", 2)
    
    def test_height_type(self):
        """
        tests if the height is an integer
        """
        with self.assertRaises(TypeError):
            rect = Rectangle(10, "2")
    
    def test_x_type(self):
        """
        tests if the x is an integer
        """
        with self.assertRaises(TypeError):
            rect = Rectangle(10, 2, "1")
    
    def test_y_type(self):
        """
        tests if the y is an integer
        """
        with self.assertRaises(TypeError):
            rect = Rectangle(10, 2, 1, "1")
    
    def test_width_value(self):
        """
        tests if the width is a positive integer
        """
        with self.assertRaises(ValueError):
            rect = Rectangle(-10, 2)
    
    def test_height_value(self):
        """
        tests if the height is a positive integer
        """
        with self.assertRaises(ValueError):
            rect = Rectangle(10, -2)
    
    def test_x_value(self):
        """
        tests if the x is a positive integer
        """
        with self.assertRaises(ValueError):
            rect = Rectangle(10, 2, -1)
    
    def test_y_value(self):
        """
        tests if the y is a positive integer
        """
        with self.assertRaises(ValueError):
            rect = Rectangle(10, 2, 1, -1)
    
    def test_area(self):
        """
        tests if the area is calculated properly
        """
        self.assertEqual(self.r1.area(), 20)
    
    def test_display(self):
        """
        tests if the display method works properly
        """
        with patch('sys.stdout', new=io.StringIO()) as fakeOutput:
            self.r1.display()
            self.assertEqual(fakeOutput.getvalue(), "##########\n##########\n")
    
    def test_str(self):
        """
        tests if the __str__ method works properly
        """
        self.assertEqual(str(self.r1), "[Rectangle] (1) 0/0 - 10/2")
    
    def test_update(self):
        """
        tests if the update method works properly
        """
        self.r1.update(89)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 0/0 - 10/2")
        self.r1.update(89, 2)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 0/0 - 2/2")
        self.r1.update(89, 2, 3)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 0/0 - 2/3")
        self.r1.update(89, 2, 3, 4)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 4/0 - 2/3")
        self.r1.update(89, 2, 3, 4, 5)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 4/5 - 2/3")

    def test_update_kwargs(self):
        """
        tests if the update method works properly with kwargs
        """
        self.r1.update(height=1)
        self.assertEqual(str(self.r1), "[Rectangle] (1) 0/0 - 10/1")
        self.r1.update(width=1, x=2)
        self.assertEqual(str(self.r1), "[Rectangle] (1) 2/0 - 1/1")
        self.r1.update(y=1, width=2, x=3, id=89)
        self.assertEqual(str(self.r1), "[Rectangle] (89) 3/1 - 2/1")
        
    def test_to_dictionary(self):
        """
        tests if the to_dictionary method works properly
        """
        self.assertEqual(self.r1.to_dictionary(), {'x': 0, 'y': 0, 'id': 1, 'height': 2, 'width': 10})
    
    def test_save_to_file(self):
        """
        tests if the save_to_file method works properly
        """
        Rectangle.save_to_file([self.r1])
        with open("Rectangle.json", "r") as file:
            self.assertEqual(json.load(file), [self.r1.to_dictionary()])
    
    def test_create(self):
        """
        tests if the create method works properly
        """
        r2 = Rectangle.create(**{'x': 0, 'y': 0, 'id': 89, 'height': 2, 'width': 10})
        self.assertEqual(str(r2), "[Rectangle] (89) 0/0 - 10/2")
    
    def test_load_from_file(self):
        """
        tests if the load_from_file method works properly
        """
        r2 = Rectangle(10, 2)
        Rectangle.save_to_file([self.r1, r2])
        list_rectangles_input = Rectangle.load_from_file()
        self.assertEqual(list_rectangles_input[0].to_dictionary(), self.r1.to_dictionary())
        self.assertEqual(list_rectangles_input[1].to_dictionary(), r2.to_dictionary())

if __name__ == "__main__":
    unittest.main()

