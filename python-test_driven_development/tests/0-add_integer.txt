The 0-add_integer Module
=======================

Module to import to use ''add_integer```
This module defines an int addition function by returning the addition of its two arguments (a + b)

    >>> add_integer = __import__("0-add_integer").add_integer

Usage:
- Int

    >>> print(add_integer(1, 2))
    3

    >>> print(add_integer(0))
    98

    >>> print(add_integer(1337, 0))
    1337

    >>> print(add_integer(4))
    102

    >>> print(add_integer(100, -2))
    98

    >>> add_integer(2, -3)
    -1

    >>> print(add_integer(-4, -8))
    -12

    >>> print(add_integer(2437039853972085021, 1))
    2437039853972085022

    >>> print(add_integer(-1, -2))
    -3

    >>> print(add_integer(-8))
    90

    >>> print(add_integer(4.1))
    102

    >>> print(add_integer(a = 12))
    110

    >>> print(add_integer(1, b = 2))
    3

    >>> print(add_integer(a = 3, b = 39))
    42

    >>> print(add_integer(2+1, 3))
    6

    >>> print(add_integer(4-2, 40))
    42

- Float
    >>> add_integer(2.5, 3.2)
    5

    >>> print(add_integer(100.3, -2))
    98

    >>> print(add_integer(3.14, 1))
    4

    >>> print(add_integer(-999, 333))
    -666

    >>> print(add_integer(-20.1, -1.20))
    -21

    >>> print(add_integer(1515, 1.6180339887))
    1516

Incorrect Usage:

    >>> print(add_integer(4, "School"))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> print(add_integer("Holberton", "School"))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer("integer"))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer("ceci est un test", 18))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer("K2tog", 5))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(None))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(1, "r"))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> print(add_integer(12, "!"))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> print(add_integer())
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> print(add_integer(float('inf')))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> print(add_integer(float('inf'), 1))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> print(add_integer(float('nan'), 2))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> print(add_integer(5, None))
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> print(add_integer(None, None))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer([10, 9], 3))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(int))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(int, 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(int = 42))
    Traceback (most recent call last):
    TypeError: add_integer() got an unexpected keyword argument 'int'

    >>> print(add_integer('#', 4))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> print(add_integer(1, 2, 1))
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> print(add_integer(b = 12))
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
